<?php

/**
 * PluginSocialMediaLastFetchTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PluginSocialMediaLastFetchTable extends myDoctrineTable
{
  // the refresh time for LastFetchTime is 10 minutes by default
  protected $refresh_time = 600;

  /**
   * Returns an instance of this class.
   *
   * @return object PluginSocialMediaLastFetchTable
   */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('PluginSocialMediaLastFetch');
  }

  /**
   * Get the "last fetch time" for a given client, class and query
   *
   * @param string $client_name	client as defined in oauth.yml
   * @param string $class			class for query, fe. TwitterTweet
   * @param string $query_sha1	sha1 of the query, fe. sha1('statuses/user_timeline.json')
   * @param string $value1		custom value, fe. user_id
   * @param string $value2 		custom value, fe. screen_name
   * @return integer	FALSE if not found
   */
  public function getLastFetchTimeForClient($client_name, $class, $query_sha1 = '', $value1 = null, $value2 = null)
  {
    $query = $this->createQuery()->//->useResultCache(true, $this->refresh_time, 'last_sync_'.$client_name.$class.$query_sha1)
    select('UNIX_TIMESTAMP(fetched_at) AS fetched_at')->addWhere('client = ?', $client_name)->addWhere('class = ?', $class)->addWhere('query_sha1 = ?', $query_sha1);
    
    if ( !is_null($value1) ) {
      $query->addWhere('value1 = ?', $value1);
    }
    
    if ( !is_null($value2) ) {
      $query->addWhere('value2 = ?', $value1);
    }
    
    $last_fetch_time = $query->fetchOne(array(), Doctrine::HYDRATE_SINGLE_SCALAR);
    if ( $last_fetch_time ) {
      return $last_fetch_time;
    }
    
    return false;
  }

  /**
   * Insert/update the "last fetch time" for a given client, class and query
   * 
   * @param string $client_name	client as defined in oauth.yml
   * @param string $class			class for query, fe. TwitterTweet
   * @param string $query_sha1	sha1 of the query, fe. sha1('statuses/user_timeline.json')
   * @param string $value1		custom value, fe. user_id
   * @param string $value2 		custom value, fe. screen_name
   */
  public function updateLastFetchTimeForClient($client_name, $class, $query_sha1 = '', $value1 = null, $value2 = null)
  {
    $lastFetch = new SocialMediaLastFetch();
    $lastFetch->setClient($client_name);
    $lastFetch->setClass($class);
    $lastFetch->setQuerySha1($query_sha1);
    $lastFetch->setValue1($value1);
    $lastFetch->setValue2($value2);
    $lastFetch->setFetchedAt(date('Y-m-d H:i:s', time()));
    $lastFetch->replace();
  
   //$cacheDriver = $this->getAttribute(Doctrine_Core::ATTR_RESULT_CACHE);
  //$cacheDriver->delete('last_sync_'.$client_name.$class.$query_sha1);
  }
}